//Output class that formats the VHDL output

#include "Output.h"

Output::Output(string file, string file2) {
	filestream.open(file.c_str());
	filestream2.open(file2.c_str());

	fileName = file;
	fileName2 = file2;

	instrAddr = 0;
	
	if(!filestream.is_open() || !filestream2.is_open()) {
		cout << endl << endl << "Problem opening file (Output)\n";
		system("pause");
	}
}

void Output::writeHeader() {
	filestream << "; This .COE file was generated by the OZ-4 assembler \n";
	filestream << "; for use in a Xilinx block ROM with the OZ-4 \n";
	filestream << "; File name: " << fileName << "\n\n";

	filestream << "memory_initialization_radix = 2;\n";
	filestream << "memory_initialization_vector = \n000000000000";

	filestream2 << "library IEEE;\n";
	filestream2 << "use IEEE.STD_LOGIC_1164.ALL;\n";
	filestream2 << "use IEEE.STD_LOGIC_ARITH.ALL;\n";
	filestream2 << "use IEEE.STD_LOGIC_UNSIGNED.ALL;\n\n";
	filestream2 << "library UNISIM;\n";
	filestream2 << "use UNISIM.VComponents.all;\n\n";
	filestream2 << "entity immediate_memory is\n";
	filestream2 << "	port(immediate_addr : in std_logic_vector(5 downto 0);\n";
	filestream2 << "		  immediate_out : out std_logic_vector(31 downto 0));\n";
	filestream2 << "end immediate_memory;\n\n";
	filestream2 << "architecture Behavioral of immediate_memory is\n\n";
	filestream2 << "type immediate_data_type is array (63 downto 0) of std_logic_vector(31 downto 0);\n";
	filestream2 << "signal immediate_data : immediate_data_type;\n\n";
	filestream2 << "begin\n\n";
	filestream2 << "	immediate_out <= immediate_data(conv_integer(unsigned(immediate_addr)));\n\n";
}

void Output::writeImm(int immediate, int addr) {
	char buffer[8];
	string buffer_s;
	itoa(immediate, buffer, 16);
	buffer_s = buffer;
	while(buffer_s.length() < 8) {
		buffer_s.insert(0, "0");
	}
	filestream2 << "\timmediate_data(" << addr << ") <= x\"" << buffer_s << "\";\n";
}

void Output::writeInstr() {
	filestream << ", \n" << opcode << immAddr;
}

void Output::writeEnd() {
	filestream << ";";
	filestream2 << "\nend Behavioral;";
}

void Output::formatAddr(int addr) {
	char buffer[6];
	string buffer_s;
	itoa(addr, buffer, 2);
	buffer_s = buffer;
	while(buffer_s.length() < 6) {
		buffer_s.insert(0, "0");
	}
	immAddr = buffer_s;
}
